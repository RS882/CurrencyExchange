#1 – исправлены типы данных в -ExchangeOperation и getRate

Название проекта: Консольное приложение "Обмен валюты" на Java Currency exchange

Цель проекта: Разработать консольное приложение на Java, которое позволяет пользователям осуществлять обмен между различными валютами и сохранять историю совершенных обменов.
Основные требования к проекту:
Интерфейс пользователя:Приложение должно предоставлять консольный интерфейс для ввода данных пользователем.
Пользователь должен иметь возможность ввести сумму для обмена, валюту, которую он хочет обменять, и валюту,
 которую он хочет приобрести.

------------// Модель данных -ExchangeOperation //----------
id -int
currencyIn - Currency
currencyOut – Currency
sumIn-double
sumOut -double
dateOfOperation- LocalDateTime
COMMISION-double-final -3%
Конструкторы – (currencyIn - Currency
currencyOut – Currency
rate -double
sumIn-double )-> внутри присвоение текущей даты времени- id-автоинкремент
сеттер для sumOut -double
геттер для COMMISION
toString
           //Обработка обмена валют:Приложение должно поддерживать обмен между несколькими
             предопределенными типами валют (например, USD, EUR, GBP и т.д.).
Currency -Enum
USD, EUR, GBP…

Курс обмена может быть зафиксирован в коде или получен из файла.
Файл exchangeReats.txt
Главная валюта EUR
Курсы указываются по отношению к главной валюте  . четыре знака после запятой

--------------------// UILayer //----------------------
Класс ExchangeUI
run- запуск- меню
exchange void ->(данныіе получаем через сканер-> void
getOperation void ->(id через scanner sout вывод)- void
getAllOperations void ->(sout вывод) void
(deleteOperation void ->(id через scanner sout вывод)- void – реализовать опционно
putOperation void ->(id через scanner sout вывод)- void – реализовать опционно

---------------------------------------------------------------------------------------------

После ввода данных пользователем, приложение должно вычислить и показать результат обмена.

---------------------// ServiceLayer //----------------------
Класс ExchangeService
exchange вход  ExchangeOperation (добавляем данные в sumOut ExchangeOperation
)-> sumOut
учитываем комиссию за операцию( мы ж не работаем бесполатно)
private addOperation  вход ExchangeOperation выход Boolean -вызывем из exchange
getOperation вход id -> ExchangeOperation
getAllOpertions вход void->ArrayList< ExchangeOperation >
(deleteOperation вход id -> Boolean – реализовать опционно
putOperation вход id -> boolean) – реализовать опционно
Сохранение истории обмена:Приложение должно сохранять историю всех совершенных обменов.

----------------------// DataLayer //-------------------------
Класс ExchangeRepository
    addOperation  вход ExchangeOperation выход boolean
    getOperation вход id -> ExchangeOperation
    getAllOperations вход void->ArrayList< ExchangeOperation >
    deleteOperation вход id -> Boolean – реализовать опционально
    putOperation вход id -> boolean) – реализовать опционно

Файл exchangeLog.txt
Формат csv

id,currencyIn,currencyOut,sumIn,sumOut,dateOfOperation,COMMISION
 Класс Rates
Static getRate – вход Currency-> double-rate из файла exchangeReats.txt
-------------------------------------------------------------------------
История должна включать дату и время обмена, сумму и типы обмениваемых валют.
Должна быть предусмотрена возможность просмотра истории обменов.
Дополнительные возможности (для продвинутого уровня):
Код должен быть четко структурирован и хорошо прокомментирован.
Добавление функционала для обработки ошибок и исключений, например, при неверном вводе данных пользователем
.Примечание
Каждая команда должна сдать проект в виде github репозитория. Все изменения должны быть реализованы через ветки
 и с осмысленными названиями коммитов. По проекту мне можно задавать только уточняющие вопросы по условию.

------Отличия слоев логики и данных------
 на уровне логики мы реализуем методы связанные с бизнесс процессом
 на уровне слоя данных мы реализуем методы, которые выполняют действия со строками